service: pickme-lambda-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  environment:
    user_pool_id: { Ref: PickmeUserPool }
    client_id: { Ref: PickmeUserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"  
    - Effect: Allow
      Action:
        - dynamodb:BatchGet*,
        - dynamodb:DescribeStream,
        - dynamodb:DescribeTable,
        - dynamodb:Get*,
        - dynamodb:Query,
        - dynamodb:Scan,
        - dynamodb:BatchWrite*,
        - dynamodb:CreateTable,
        - dynamodb:Delete*,
        - dynamodb:Update*,
        - dynamodb:PutItem
      Resource: "*"  

functions:
  loginUser:
    handler: src/user/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true

  signupUser:
    handler: src/user/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  restaurantsCreate:
    handler: src/restaurants/restaurants.handler
    events:
      - http:
          path: /restaurants
          method: post
          cors: true
          authorizer:
            name: pickmeUsersAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - PickmeUserPool
                - Arn
            claims:
              - email                  

  restaurantsGet:
    handler: src/restaurants/restaurants.handler
    events:
      - http:
          path: /restaurants/{id}
          method: get
          cors: true
          authorizer:
            name: pickmeUsersAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - PickmeUserPool
                - Arn
            claims:
              - email

  ordersCreate:
    handler: src/order/order.handler
    events:
      - http:
          path: /orders
          method: post
          cors: true
          authorizer:
            name: pickmeUsersAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - PickmeUserPool
                - Arn
            claims:
              - email

  ordersGet:
    handler: src/orders/order.handler
    events:
      - http:
          path: /order/{id}
          method: get
          cors: true
          authorizer:
            name: pickmeUsersAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - PickmeUserPool
                - Arn
            claims:
              - email            


resources:
  Resources:
    PickmeUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: pickme-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    PickmeUserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: pickme-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: PickmeUserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    RestaurantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Restaurant
        AttributeDefinitions:
          - 
            AttributeName: restaurant_id
            AttributeType: S
        KeySchema:
          - 
            AttributeName: restaurant_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        AttributeDefinitions:
          - 
            AttributeName: order_id
            AttributeType: S
        KeySchema:
          - 
            AttributeName: order_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5       